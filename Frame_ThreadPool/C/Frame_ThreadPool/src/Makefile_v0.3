

CFLAGS = -g -Wall 

TARGET = bin_ThreadPool_Frame_Demo

#本工程需要的所有对象文件
OBJLIST = Main_Thread_Pool.o \
    AddWork_Frame.o \
    DoWork_Frame.o \
    Common.o

APPOBJLIST = 

#编译所有子目录
SUBDIRS=`ls -d */ | grep -v 'bin' | grep -v 'lib' | grep -v 'include'`

#编译子目录
define make_subdir
 @for subdir in $(SUBDIRS) ; do \
 ( cd $$subdir && make $1) \
 done;
endef

all: 
	$(call make_subdir , all)
	gcc  ${OBJLIST} ${APPOBJLIST}  ${CFLAGS} -o ${TARGET} -lpthread  -L${LIBDIR} -lPUBFrame_Lib -Wl,-rpath=${LIBDIR}

clean:
	$(RM) $(OBJLIST)
	$(call make_subdir , clean)

make_child_all:
	$(call make_subdir , all)

LIBDIR = ../../../../../../Frame_Lib/
TARGET: ${OBJLIST}
	gcc  ${OBJLIST} ${OBJ}  ${CFLAGS} -o ${TARGET} -lpthread  -L${LIBDIR} -lPUBFrame_Lib -Wl,-rpath=${LIBDIR}


Main_Thread_Pool.o:Main_Thread_Pool.c Struct_Frame.h Log_Frame.h
	gcc -o Main_Thread_Pool.o -c Main_Thread_Pool.c ${CFLAGS}
AddWork_Frame.o:AddWork_Frame.c AddWork_Frame.h Struct_Frame.h Log_Frame.h
	gcc -c AddWork_Frame.c ${CFLAGS}
DoWork_Frame.o:DoWork_Frame.c DoWork_Frame.h Struct_Frame.h Log_Frame.h
	gcc -c DoWork_Frame.c ${CFLAGS}
Common.o:Common.c Common.h
	gcc -c Common.c ${CFLAGS}

.PHONY:all clean
